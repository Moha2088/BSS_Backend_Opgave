// <auto-generated />
using System;
using BSS_Backend_Opgave.Repositories.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BSS_Backend_Opgave.Repositories.Migrations
{
    [DbContext(typeof(BSS_Backend_OpgaveAPIContext))]
    [Migration("20241121114801_Create_db")]
    partial class Create_db
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BSS_Backend_Opgave.Models.EventLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("EventTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventTime");

                    b.HasIndex("SensorId");

                    b.ToTable("EventLog");
                });

            modelBuilder.Entity("BSS_Backend_Opgave.Models.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.ToTable("Organisation");
                });

            modelBuilder.Entity("BSS_Backend_Opgave.Models.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<int?>("SensorCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Location");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("SensorCategoryId");

                    b.HasIndex("Name", "Location");

                    b.ToTable("Sensor");
                });

            modelBuilder.Entity("BSS_Backend_Opgave.Models.SensorCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.ToTable("SensorCategory");
                });

            modelBuilder.Entity("BSS_Backend_Opgave.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventLogId")
                        .HasColumnType("int");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.Property<string>("StateType")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("EventLogId")
                        .IsUnique();

                    b.HasIndex("SensorId")
                        .IsUnique();

                    b.HasIndex("StateType");

                    b.ToTable("State");
                });

            modelBuilder.Entity("BSS_Backend_Opgave.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<int?>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganisationId1")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("OrganisationId1");

                    b.ToTable("User");
                });

            modelBuilder.Entity("BSS_Backend_Opgave.Models.EventLog", b =>
                {
                    b.HasOne("BSS_Backend_Opgave.Models.Sensor", "Sensor")
                        .WithMany("EventLogs")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("BSS_Backend_Opgave.Models.Sensor", b =>
                {
                    b.HasOne("BSS_Backend_Opgave.Models.Organisation", "Organisation")
                        .WithMany("Sensors")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BSS_Backend_Opgave.Models.SensorCategory", "SensorCategory")
                        .WithMany("Sensors")
                        .HasForeignKey("SensorCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Organisation");

                    b.Navigation("SensorCategory");
                });

            modelBuilder.Entity("BSS_Backend_Opgave.Models.State", b =>
                {
                    b.HasOne("BSS_Backend_Opgave.Models.EventLog", "EventLog")
                        .WithOne("State")
                        .HasForeignKey("BSS_Backend_Opgave.Models.State", "EventLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BSS_Backend_Opgave.Models.Sensor", "Sensor")
                        .WithOne("State")
                        .HasForeignKey("BSS_Backend_Opgave.Models.State", "SensorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventLog");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("BSS_Backend_Opgave.Models.User", b =>
                {
                    b.HasOne("BSS_Backend_Opgave.Models.Organisation", null)
                        .WithMany("Users")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BSS_Backend_Opgave.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId1");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("BSS_Backend_Opgave.Models.EventLog", b =>
                {
                    b.Navigation("State");
                });

            modelBuilder.Entity("BSS_Backend_Opgave.Models.Organisation", b =>
                {
                    b.Navigation("Sensors");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BSS_Backend_Opgave.Models.Sensor", b =>
                {
                    b.Navigation("EventLogs");

                    b.Navigation("State");
                });

            modelBuilder.Entity("BSS_Backend_Opgave.Models.SensorCategory", b =>
                {
                    b.Navigation("Sensors");
                });
#pragma warning restore 612, 618
        }
    }
}
